"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=/home/est/.vim/bundle/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('/home/est/.vim/bundle'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" for very nice file search
call dein#add('wincent/command-t')
" file system tree view
call dein#add('scrooloose/nerdtree')
" autocomplete code snippets
call dein#add('MarcWeber/vim-addon-mw-utils')

call dein#add('tomtom/tlib_vim')

call dein#add('garbas/vim-snipmate')
" the snippet definition
call dein#add('honza/vim-snippets')
" classic tab completion
call dein#add('ervandew/supertab')
" lovely colorscheme
call dein#add('altercation/vim-colors-solarized')
" sensible vim defaults
call dein#add('tpope/vim-sensible')
" css autoprefixer
call dein#add('ioannis-kapoulas/vim-autoprefixer')
" Git commands
call dein#add('tpope/vim-fugitive')
" gnuplot syntax highlighting
call dein#add('vim-scripts/gnuplot.vim')
" java auto-imports
call dein#add('rustushki/JavaImp.vim')
" surround text with brackets and tags
call dein#add('tpope/vim-surround')
" Align text at specific symbols
call dein#add('godlygeek/tabular')
" enable folding in python
call dein#add('https://github.com/vim-scripts/python_fold')
" lightweight powerline
call dein#add('vim-airline/vim-airline')
" Python mode with autocomplete and documentation
call dein#add('klen/python-mode')

" Required:
call dein#end()

" Required:
filetype off
syntax on
filetype plugin indent on

" If you want to install not installed plugins on startup.
"if dein#check_install()
"  call dein#install()
"endif

syntax on

" code folding
set foldmethod=indent
set foldlevel=99

" split window movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"omnicomplete
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"

" NERD tree
map <leader>n :NERDTreeToggle<CR>

" solarized colorscheme
set background=dark
colorscheme solarized

" use the system clipboard for all copy/paste operations
set clipboard=unnamedplus

" font settings
set guifont=Monospace\ 13

" get linenumbers
set nu

" tabstopwidth
set ts=2
set shiftwidth=2
set softtabstop=2
set smarttab
set expandtab

autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab

" highlight the current cursor line
set cursorline

" enable all python highlighting features
let python_highlight_all = 1

" custom filetypes (for gnuplot)
let myfiletypefile = "~/.vim/myfiletypes.vim"
filetype on
syntax on

let g:JavaImpPaths =
   \ "/usr/lib/jvm/openjdk-7," .
   \ $HOME . "/code/jcuda/jcuda/JCudaJava/src/main/java," .
   \ $HOME . "/code/jcuda/jcuda-main/target," .
   \ $HOME . "/code/MLPlacer/src,"

let g:JavaImpDataDir = $HOME . "/vim/JavaImp"

" highlight all search matches
set hlsearch

" change the whitespace chars for list
set listchars=tab:▸\ ,eol:¬,trail:⌴,conceal:-,nbsp:⌴

" allow switching between unsaved buffers
set hidden

" dont break words at the lineend
set linebreak
" use par as formatting program with line width 80, inserting spaces for empty
" comment lines and handling nested email comments well
set formatprg=par\ -w80rq

"" confing stuff for python mode
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" airline font integration
let g:airline_powerline_fonts = 1

" scroll only 8 lines with crtl-d/u
set scroll=8

" unfold using the spacebar
nnoremap <Space> za
vnoremap <Space> za

" enable different cursors for vim modes in gnome terminal
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' | 
    \   silent execute '!echo -ne "\e[6 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[4 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif
