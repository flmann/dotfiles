" ------------------ dein Scripts ------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=/home/est/.config/nvim/bundle/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('/home/est/.config/nvim/bundle'))
"
" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" Add or remove your plugins here:

" ---- looks ----
" lovely colorscheme
call dein#add('altercation/vim-colors-solarized')
" lightweight powerline
call dein#add('vim-airline/vim-airline')

" ---- editing ----
" surround text with brackets and tags
call dein#add('tpope/vim-surround')
" Align text at specific symbols
call dein#add('godlygeek/tabular')
" fuzzy file finder
call dein#add('ctrlpvim/ctrlp.vim')
" general autocompletion
call dein#add('Shougo/deoplete.nvim')
" snippet engine
call dein#add('SirVer/ultisnips')
" snippet definitions
call dein#add('honza/vim-snippets')
" use the * command to search for visual selection
call dein#add('nelstrom/vim-visual-star-search')
" :Subvert command to search for multiple versions of a word
call dein#add('tpope/vim-abolish')

" ---- integration ----
" make util
call dein#add('neomake/neomake')

" ---- python ----
" enable folding in python
" call dein#add('https://github.com/vim-scripts/python_fold')
" better tab completion
call dein#add('zchee/deoplete-jedi')

" Required:
call dein#end()

" Required:
filetype plugin indent on


" ------------------ general vim settings ------------------
syntax on

" path to python binaries
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

" solarized colorscheme
set background=dark
colorscheme solarized

" show (relative) linenumbers
" set nu
set rnu

" tab configuration
set ts=2
set shiftwidth=2
set softtabstop=2
set smarttab
set expandtab

autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab

" highlight the current cursor line
set cursorline

" enable all python highlighting features
let python_highlight_all = 1

" highlight all search matches
set hlsearch

" change the whitespace chars for list
set listchars=tab:▸\ ,eol:¬,trail:⌴,conceal:-,nbsp:⌴

" dont break words at the lineend
set linebreak

" airline font integration
let g:airline_powerline_fonts = 1

" change cursor shape with modes
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" ---- editing ----

" code folding
set foldmethod=indent
set foldlevel=99

" split window movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" split window resizing
map <c-Right> <c-w>>
map <c-Left> <c-w><
map <c-Up> <c-w>+
map <c-Down> <c-w>-

" scroll only 8 lines with crtl-d/u
set scroll=4

" unfold using the spacebar
nnoremap <Space> za
vnoremap <Space> za

" use par as formatting program with line width 80, inserting spaces for empty
" comment lines and handling nested email comments well
set formatprg=par\ -w79rq

" allow switching between unsaved buffers
set hidden

" use the system clipboard for all copy/paste operations
set clipboard=unnamedplus

" exit terminal insert mode
tnoremap <esc> <c-\><c-n>


" ------------------ plugin configurations ------------------

" ---- crtl-p config ----
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" ---- deoplete config ----

function! MyTabComplete()
  let l:col = col('.') - 1

  if pumvisible()
    return "\<C-n>"
  else
    if !l:col || getline('.')[l:col - 1] !~# '\k'
      return "\<Tab>"
    else
      return "\<C-r>=deoplete#mappings#manual_complete()\<CR>"
    endif
  endif
endfunction

let g:deoplete#enable_at_startup = 1
" disable autocomplete
let g:deoplete#disable_auto_complete = 1
"inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <silent><expr> <Tab> MyTabComplete()

autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
autocmd CompleteDone * pclose " To close preview window of deoplete automagically

" ---- ultisnips config ----
"  snippet directories
let g:UltiSnipsSnippetDirectories=["MySnips","UltiSnips"]
" Trigger configuration.
let g:ulti_expand_or_jump_res = 0 "default value, just set once
function! Ulti_ExpandOrJump_and_getRes()
  if pumvisible()
    return 0
  else
    call UltiSnips#ExpandSnippetOrJump()
    return g:ulti_expand_or_jump_res
endfunction
inoremap <Tab> <C-R>=(Ulti_ExpandOrJump_and_getRes() > 0)?"":MyTabComplete()<CR>

let g:UltiSnipsExpandTrigger='<C-q>' " this needs to be mapped to something (default: Tab)
inoremap <silent><expr> <CR> pumvisible() ? "<C-R>=UltiSnips#ExpandSnippet()<CR>" : "\<CR>"
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'

" :UltiSnipsEdit splits window vertical
let g:UltiSnipsEditSplit="vertical"

" ---- neomake config ----
let g:neomake_python_enabled_makers = ['flake8']
autocmd! BufWritePost * Neomake
let g:neomake_open_list=2
" map jumping between errors/warnings
nmap <Leader>n :lnext<CR>
nmap <Leader>N :lprevious<CR>
